swagger: '2.0'
info:
  description: Absence System
  version: 1.0.0
  title: Enroll to Absence System
  # put the contact info for your development or API team
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# the domain of the service
host: abs.iulian.co.uk

basePath: /api

# array of all schemes that your API supports
schemes:
  - https
  - http

consumes:
- "application/json"
produces:
- "application/json"

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: |
     For accessing the protected API a valid JWT token must be passed in all the queries in
     the 'Authorization' header.


     A valid JWT token is generated by the API and returned as answer of a call
     to the route /login giving a valid user & password.

     The following syntax must be used in the 'Authorization' header :

     Bearer xxxxxx.yyyyyyy.zzzzzz

tags:
- name: "Authenticate"
- name: "Absences"
- name: "Enroll"
- name: "HealthCheck"

paths:
  /login/{role}:
    x-swagger-router-controller: login-controller
    post:
      tags:
        - Authenticate
      operationId: loginPost
      description: "Login"
      parameters:
        - name: role
          in: path
          required: true
          type: string
        - name: authentication
          in: body
          required: true
          schema:
            $ref: "#/definitions/Authentication"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Token"
        403:
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /ping:
    x-swagger-router-controller: health-controller
    get:
      tags:
        - HealthCheck
      summary: "Server heartbeat operation"
      description: "Server heartbeat operation"
      operationId: "pingGET"
      parameters: []
      responses:
        200:
          description: "OK"
  /absences:
    x-swagger-router-controller: absences-controller
    post:
      tags:
        - Absences
      summary: "Record absences for Firstname.Lastname@company.com"
      description: "Record absences for Firstname.Lastname@company.com, only accessible to 'admins' and 'users'"
      operationId: "absencesPOST"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - in: "body"
        name: "absences"
        description: "The absences to be recorded"
        required: true
        schema:
          $ref: "#/definitions/RecordAbsences"
      responses:
        202:
          description: "Request is accepted"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Invalid authorization token"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - Absences
      summary: "Retrive absences for today"
      description: "Retrive absences for today, only accessible to 'admins' and 'users'"
      operationId: "absencesGET"
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            type: "array"
            items:
              type: "string"
          examples:
            absences:
            - "firstname1.lastname1@company.com"
            - "firstname2.lastname2@company.com"
        401:
          description: "Invalid authorization token"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
  /enroll:
    x-swagger-router-controller: enroll-controller
    post:
      tags:
        - Enroll
      summary: "Enroll Firstname.Lastname@company.com"
      description: "Enroll absences for Firstname.Lastname@company.com, only accessible to 'admins'"
      operationId: "enrollPOST"
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - in: "body"
        name: "enroll"
        description: "Firstname.Lastname@company.com to be enrolled"
        required: true
        schema:
          $ref: "#/definitions/Enroll"
      responses:
        200:
          description: "Enrolled"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Invalid authorization token"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - Enroll
      summary: "Remove Firstname.Lastname@company.com"
      description: "Remove Firstname.Lastname@company.com, only accessible to 'admins'"
      operationId: "enrollDELETE"
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      parameters:
      - name: "authorization"
        in: "header"
        description: "Access token"
        required: true
        type: "string"
      - in: "body"
        name: "unroll"
        description: "Firstname.Lastname@company.com to be unrolled"
        required: true
        schema:
          $ref: "#/definitions/Enroll"
      responses:
        204:
          description: "Removed"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Invalid authorization token"
        404:
          description: "Not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"

definitions:
  Error:
    type: "object"
    required:
    - "code"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
      fields:
        type: "string"
  Authentication:
    type: object
    properties:
      username:
        type: string
        example: "username"
      password:
        type: string
        example: "password"
  Token:
    type: object
    properties:
      token:
        type: string
  RecordAbsences:
    type: "object"
    required:
    - "email_address"
    properties:
      email_address:
        type: "string"
      days_off:
        type: "array"
        items:
          type: "string"
          description: "dd/mm/yyyy"
    example:
      email_address: "Firstname.Lastname@company.com"
      days_off:
        - "01/01/2017"
        - "02/01/2017"
  Enroll:
    type: "object"
    required:
    - "email_address"
    properties:
      email_address:
        type: "string"
